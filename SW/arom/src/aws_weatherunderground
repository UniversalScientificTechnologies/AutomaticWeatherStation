#!/usr/bin/env python

import math
import time
import rospy
import json
import std_msgs
import httplib2

from __init__ import AromNode



class weatherUploader(AromNode):
    node_name = "aws_weatherudnerground"
    node_type = "aws_uploader"
    node_pymlab = False

    def __init__(self):
        rospy.Subscriber("/arom/node/aws", std_msgs.msg.String, self.callback)
        ID = rospy.get_param('/arom/aws/%s/ID'%(self.node_name))
        PASSWORD = rospy.get_param('/arom/aws/%s/PASSWORD'%(self.node_name))

        self.data = {}

        AromNode.__init__(self)
        self.UpdateFeature()

        rate = rospy.Rate(0.2) # 5s
        
        #
        # Tady chvilku pockas, dokud Ti neprijdou prvni data ..
        # 
        while self.data == {} and not rospy.is_shutdown():
            time.sleep(0.25)

        #
        # Uz je asi mame :)
        #
        while not rospy.is_shutdown():
            try:
                self.UpdateFeature()
                req = ""
                #types = rospy.get_param('/arom/node/aws_weatherudnerground/feature/aws_uploader_api_params/data/')
                '''
                for preset in self.aws_preset:
                    try:
                        req += "&%s=%s" %(str(self.aws_preset[preset]), preset)

                    except Exception, e:
                        rospy.loginfo("#1> " + repr(e))
                '''

                for sensor in self.data:
                    try:
                        if sensor.has_key('wu_type'):
                            req += "&%s=%f" %(sensor['wu_type'], self.convert(sensor['value'], sensor['unit']))

                    except Exception, e:
                        rospy.loginfo("#2> " + repr(e))

                #print req

                print "https://rtupdate.wunderground.com/weatherstation/updateweatherstation.php?realtime=1&rtfreq=5&PASSWORD=B4IS42OX&ID=IJIHOESK11&dateutc=now&action=updateraw&softwaretype=AROM-Autonomou-robotic-observatory-manager"+req

                resp, content = httplib2.Http().request("https://rtupdate.wunderground.com/weatherstation/updateweatherstation.php?realtime=1&rtfreq=5&PASSWORD=B4IS42OX&ID=IJIHOESK11&dateutc=now&action=updateraw&softwaretype=AROM-Autonomou-robotic-observatory-manager"+req)
            except Exception, e:
                rospy.logerr(e)

            rate.sleep()

    def callback(self, msg):
        recieved = json.loads(msg.data)
        self.data = recieved['sensors']
        self.data += recieved['calculation']


    def convert(self, value, unit):
        value = float(value)
        if unit == 'arom_temp_C':
            out = value * 9.0/5.0 + 32.0
        elif unit == 'arom_press_PA':
            out = value*0.000295333727
        elif unit == 'arom_light_Lux-10x':
            out = (value/10) * 0.0079
        else:
            out = value

        return out


    def UpdateFeature(self):
        self.api_data = rospy.get_param('/arom/node%s/feature/aws_uploader_api_params/data' %(str(rospy.get_name())), False)

#https://rtupdate.wunderground.com/weatherstation/updateweatherstation.php?realtime=1&rtfreq=5&PASSWORD=B4IS42OX&ID=IJIHOESK11&dateutc=now&action=updateraw&softwaretype=AROM-Autonomou-robotic-observatory-manager&indoortempf=72.380469&tempf=34.524147&humidity=82.484169&solarradiation=0.000000
#https://rtupdate.wunderground.com/weatherstation/updateweatherstation.php?realtime=1&rtfreq=5&PASSWORD=B4IS42OX&ID=IJIHOESK11                                                                                     &indoortempf=72.310156&tempf=34.524147&humidity=82.539101&solarradiation=0.000000&dewptf=28.238224

if __name__ == '__main__':
    weatherUploader()





'''
RapidFire Server

usage
action [action = updateraw]
ID [ID as registered by wunderground.com]
PASSWORD [PASSWORD registered with this ID]
dateutc - [YYYY-MM-DD HH:MM:SS (mysql format)]
winddir - [0-360]
windspeedmph - [mph]
windgustmph - [windgustmph ]
humidity - [%]
tempf - [temperature F]
rainin - [rain in]
dailyrainin - [daily rain in accumulated]
baromin - [barom in]
dewptf- [dewpoint F]
weather - [text] -- metar style (+RA) 
clouds - [text] -- SKC, FEW, SCT, BKN, OVC
softwaretype - [text] ie: vws or weatherdisplay
'''



'''
action [action=updateraw] -- always supply this parameter to indicate you are making a weather observation upload
ID [ID as registered by wunderground.com]
PASSWORD [Station Key registered with this PWS ID, case sensitive]
dateutc - [YYYY-MM-DD HH:MM:SS (mysql format)] In Universal Coordinated Time (UTC) Not local time
=========================
winddir - [0-360 instantaneous wind direction]
windspeedmph - [mph instantaneous wind speed]
windgustmph - [mph current wind gust, using software specific time period]
windgustdir - [0-360 using software specific time period]
windspdmph_avg2m  - [mph 2 minute average wind speed mph]
winddir_avg2m - [0-360 2 minute average wind direction]
windgustmph_10m - [mph past 10 minutes wind gust mph ]
windgustdir_10m - [0-360 past 10 minutes wind gust direction]
humidity - [% outdoor humidity 0-100%]
dewptf- [F outdoor dewpoint F]
tempf - [F outdoor temperature] (for extra outdoor sensors use temp2f, temp3f, and so on)
rainin - [rain inches over the past hour)] -- the accumulated rainfall in the past 60 min
dailyrainin - [rain inches so far today in local time]
baromin - [barometric pressure inches]
weather - [text] -- metar style (+RA)
clouds - [text] -- SKC, FEW, SCT, BKN, OVC
soiltempf - [F soil temperature]  (for sensors 2,3,4 use soiltemp2f, soiltemp3f, and soiltemp4f)
soilmoisture - [%] (for sensors 2,3,4 use soilmoisture2, soilmoisture3, and soilmoisture4)
leafwetness  - [%] (for sensor 2 use leafwetness2)
solarradiation - [W/m^2]
UV - [index]
visibility - [nm visibility]
indoortempf - [F indoor temperature F]
indoorhumidity - [% indoor humidity 0-100]
---
##Pollution Fields:
AqNO - [ NO (nitric oxide) ppb ]
AqNO2T - (nitrogen dioxide), true measure ppb
AqNO2 - NO2 computed, NOx-NO ppb
AqNO2Y - NO2 computed, NOy-NO ppb
AqNOX - NOx (nitrogen oxides) - ppb
AqNOY - NOy (total reactive nitrogen) - ppb
AqNO3 -NO3 ion (nitrate, not adjusted for ammonium ion) UG/M3
AqSO4 -SO4 ion (sulfate, not adjusted for ammonium ion) UG/M3
AqSO2 -(sulfur dioxide), conventional ppb
AqSO2T -trace levels ppb
AqCO -CO (carbon monoxide), conventional ppm
AqCOT -CO trace levels ppb
AqEC -EC (elemental carbon) - PM2.5 UG/M3
AqOC -OC (organic carbon, not adjusted for oxygen and hydrogen) - PM2.5 UG/M3
AqBC -BC (black carbon at 880 nm) UG/M3
AqUV-AETH  -UV-AETH (second channel of Aethalometer at 370 nm) UG/M3
AqPM2.5 - PM2.5 mass - UG/M3 
AqPM10 - PM10 mass - PM10 mass
AqOZONE - Ozone - ppb
softwaretype - [text] ie: WeatherLink, VWS, WeatherDisplay
'''

